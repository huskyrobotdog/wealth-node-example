/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** 运行模式 */
export const enum RunMode {
  /** 回测 */
  Backtest = 0,
  /** 模拟 */
  Sandbox = 1,
  /** 实盘 */
  Real = 2
}
/** 交易类型 */
export const enum TradeType {
  /** 限价 */
  Limit = 0,
  /** 市价 */
  Market = 1
}
/** 交易方向 */
export const enum TradeSide {
  /** 做多 */
  Long = 0,
  /** 做空 */
  Short = 1
}
/** 交易动作 */
export const enum TradeAction {
  /** 买入 */
  Buy = 0,
  /** 卖出 */
  Sell = 1
}
export interface Callback {
  /** 设置 */
  onSetup?: (ctx:Context) => void
  /** 初始化 */
  onInit?: (ctx:Context) => void
  /** 每日开始 */
  onDayBegin?: (ctx:Context) => void
  /** 每小时开始 */
  onHourBegin?: (ctx:Context) => void
  /** 每分钟开始 */
  onMinuteBegin?: (ctx:Context) => void
  /** Tick */
  onTick?: (ctx:Context) => void
  /** 每分钟结束 */
  onMinuteEnd?: (ctx:Context) => void
  /** 每小时结束 */
  onHourEnd?: (ctx:Context) => void
  /** 每日结束 */
  onDayEnd?: (ctx:Context) => void
  /** 策略停止 */
  onStop?: (ctx:Context) => void
}
/** 运行回测 */
export declare function runBacktest(config: BacktestConfig, callback: Callback): void
/** Decimal */
export declare class Decimal {
  /** 通过字符串创建 */
  static fromString(value: string): Decimal
  /** 通过number创建 */
  static fromNumber(value: number): Decimal
  /** 转为字符串 */
  toString(): string
  /** 转为number */
  toNumber(): number
}
/** 回测配置 */
export declare class BacktestConfig {
  constructor()
  /** 设置开始时间 */
  begin(this: this, begin: string): this
  /** 设置结束时间 */
  end(this: this, end: string): this
  /** 设置结束时间 */
  balance(this: this, balance: Decimal): this
}
/** 上下文 */
export declare class Context {
  constructor()
  /** 设置基准 */
  setBenchmark(symbol: string): void
  /** 设置交易对 */
  setPair(symbol: string, takerRate: Decimal, makerRate: Decimal): void
  /** 限价买入 */
  limitBuy(symbol: string, side: TradeSide, price: Decimal, volume: Decimal): void
  /** 市价买入 */
  marketBuy(symbol: string, side: TradeSide, quoteVolume: Decimal): void
  /** 限价卖出 */
  limitSell(symbol: string, side: TradeSide, price: Decimal, volume: Decimal): void
  /** 市价卖出 */
  marketSell(symbol: string, side: TradeSide, volume: Decimal): void
  /** 取消订单 */
  cancelOrder(symbol: string, id: string): void
  /** 交易时间 */
  tradeTime(): Date
  /** 日志 调试 */
  debug(msg: string): void
  /** 日志 信息 */
  info(msg: string): void
  /** 日志 警告 */
  warn(msg: string): void
  /** 日志 错误 */
  error(msg: string): void
  /** 停止运行 */
  stop(): void
}
